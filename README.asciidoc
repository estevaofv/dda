== dda - Django Desktop Application

=== Introduction

DDA is an example project to demonstrate how to use Django as a desktop
application.  It provides an alternative to using a GUI framework such as
https://docs.python.org/3.4/library/tkinter.html[Tkinter] or
http://sourceforge.net/projects/pyqt/[PyQt].

It is a work in progress.

=== Developer Initial Setup

First, install Python 3.4.  The application will probably work with any
3.x version, but it has only been tested on 3.4.

.Initial Install
-------------------------------------------------------------------------------
(527)% virtualenv env
(528)% source env/Scripts/activate
(env)(529)% pip install -r requirements.txt
-------------------------------------------------------------------------------

NOTE: The above commands assumes that you have +virtualenv+ on your path.
      If you do not, then you will need to list the entire path to execute
      it. +
      For example, +/c/Python34/Scripts/virtualenv+ would be the path
      for a Windows install (assuming you were running a Bash shell).

Because this repo includes a database, you do not need to run +migrate+
to create it yourself.

=== Usage

At the command line, type the following.

.Run Application
-------------------------------------------------------------------------------
(env)(530)% python manage.py runserver
-------------------------------------------------------------------------------

Open up your favourite web browser, and navigate to http://127.0.0.1:8000/.

At the top of the web page window, you will see the application menu.
You can access the Administration content under the drop down menu of the
same name.  The login name is +admin+ and the password is +admin+.

=== Credits

To allow the Django Desktop Application to access common javascript and css
files used by the web pages (without having to hit the network), I have
included copies in this distribution.  Here is a list:

 - http://jquery.com/[jQuery (Version 2.1.1)]
 - http://getbootstrap.com/[Bootstrap (Version 3.3.1)]
 - http://glyphicons.com/[Glyphicons] (Graciously donated to Bootstrap)
 - http://silviomoreto.github.io/bootstrap-select/[Bootstrap Select (Version 1.6.3)]

They are all awesome.

=== Things To Do

 - Freeze Application +
   There is some experimental content that calls cx_freeze, but the resulting
   executable does not run successfully.
 - Create Installer +
   Add http://nsis.sourceforge.net/Main_Page[NSIS] installer for application.
   This is easy enough to do, but there is not much point in doing it until
   the freeze problem is addressed.
 - Use A More Robust Local Webserver +
   Right now, the application is using the built-in Django webserver
   (in debug mode!).  Other people that have used Django in this way have
   used http://www.cherrypy.org/[CherryPy], and I plan on doing the same.
   Eventually. +
   I would really like to get this working using the built-in webserver, as
   I think that this may be just fine for simple applications. (And, I have
   been beating my head against it for long enough, that I want to get it
   working from sheer stubbornness.) +
   +
   See https://bitbucket.org/Lawouach/cherrypy-recipes/[this] example for
   using CherryPy.
   http://tech.jjude.com/make-your-django-application-as-a-stand-alone-desk/[Here]
   is another example. +
   As well as https://github.com/kevinlondon/django-py2app-demo[here]. +
   https://baxeico.wordpress.com/2013/10/13/django-on-windows/[This] example
   uses Python 2.7, where I am using Python 3.4.
